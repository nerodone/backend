// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Emethod string

const (
	EmethodPassword Emethod = "password"
	EmethodOauth    Emethod = "oauth"
)

func (e *Emethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Emethod(s)
	case string:
		*e = Emethod(s)
	default:
		return fmt.Errorf("unsupported scan type for Emethod: %T", src)
	}
	return nil
}

type NullEmethod struct {
	Emethod Emethod `json:"emethod"`
	Valid   bool    `json:"valid"` // Valid is true if Emethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmethod) Scan(value interface{}) error {
	if value == nil {
		ns.Emethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Emethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Emethod), nil
}

type Eplatform string

const (
	EplatformNeovim  Eplatform = "neovim"
	EplatformWeb     Eplatform = "web"
	EplatformDesktop Eplatform = "desktop"
	EplatformMobile  Eplatform = "mobile"
	EplatformCli     Eplatform = "cli"
	EplatformVscode  Eplatform = "vscode"
)

func (e *Eplatform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Eplatform(s)
	case string:
		*e = Eplatform(s)
	default:
		return fmt.Errorf("unsupported scan type for Eplatform: %T", src)
	}
	return nil
}

type NullEplatform struct {
	Eplatform Eplatform `json:"eplatform"`
	Valid     bool      `json:"valid"` // Valid is true if Eplatform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEplatform) Scan(value interface{}) error {
	if value == nil {
		ns.Eplatform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Eplatform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEplatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Eplatform), nil
}

type Oauth struct {
	ID       uuid.UUID      `json:"id"`
	UserID   uuid.NullUUID  `json:"user_id"`
	Provider string         `json:"provider"`
	Avatar   sql.NullString `json:"avatar"`
	Email    string         `json:"email"`
	Username string         `json:"username"`
}

type Passwordlogin struct {
	ID        uuid.UUID      `json:"id"`
	UserID    uuid.NullUUID  `json:"user_id"`
	Email     string         `json:"email"`
	Password  sql.NullString `json:"password"`
	LastLogin time.Time      `json:"last_login"`
}

type Session struct {
	ID              uuid.UUID      `json:"id"`
	UserID          uuid.NullUUID  `json:"user_id"`
	AccessToken     sql.NullString `json:"access_token"`
	RefreshToken    string         `json:"refresh_token"`
	Platform        Eplatform      `json:"platform"`
	Method          Emethod        `json:"method"`
	OauthID         uuid.NullUUID  `json:"oauth_id"`
	PasswordLoginID uuid.NullUUID  `json:"password_login_id"`
	CreatedAt       time.Time      `json:"created_at"`
	LastLogin       time.Time      `json:"last_login"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	UserName  string    `json:"user_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	LastLogin time.Time `json:"last_login"`
}
