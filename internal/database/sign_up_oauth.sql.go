// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sign_up_oauth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const signupWithOauth = `-- name: SignupWithOauth :one
insert into Oauth (id , user_id , provider , avatar , email, username)
values ( gen_random_uuid(), $1 , $2 , $3 , $4, $5)
returning id, username, avatar
`

type SignupWithOauthParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
	Avatar   string    `json:"avatar"`
	Email    string    `json:"email"`
	Username string    `json:"username"`
}

type SignupWithOauthRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Avatar   string    `json:"avatar"`
}

func (q *Queries) SignupWithOauth(ctx context.Context, arg SignupWithOauthParams) (SignupWithOauthRow, error) {
	row := q.db.QueryRowContext(ctx, signupWithOauth,
		arg.UserID,
		arg.Provider,
		arg.Avatar,
		arg.Email,
		arg.Username,
	)
	var i SignupWithOauthRow
	err := row.Scan(&i.ID, &i.Username, &i.Avatar)
	return i, err
}
