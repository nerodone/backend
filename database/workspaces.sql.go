// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workspaces.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkspace = `-- name: CreateWorkspace :one
insert into workspaces (id, name, owner, updated_at, created_at, description) values (
  gen_random_uuid(),$1, $2, NOW(), NOW(), $3
)
returning id, owner, name, description, created_at, updated_at
`

type CreateWorkspaceParams struct {
	Name        string         `json:"name"`
	Owner       uuid.UUID      `json:"owner"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, createWorkspace, arg.Name, arg.Owner, arg.Description)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces WHERE id = $1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWorkspace, id)
	return err
}

const getAllWorkspaces = `-- name: GetAllWorkspaces :many
SELECT id, owner, name, description, created_at, updated_at
FROM workspaces w
WHERE w.owner = $1
OR EXISTS (
  SELECT 1
  FROM collaborate c
  WHERE c.user_id = $1
  AND c.workspace_id = w.id
)
`

// GetAllWorkspaces doesnt return projects assosiated to each workspace
func (q *Queries) GetAllWorkspaces(ctx context.Context, owner uuid.UUID) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkspaces, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkspacesWithProjects = `-- name: GetAllWorkspacesWithProjects :many
SELECT workspaces.id, workspaces.owner, workspaces.name, workspaces.description, workspaces.created_at, workspaces.updated_at, projects.id, projects.name, projects.description, projects.workspace, projects.created_at, projects.updated_at
FROM workspaces
JOIN projects ON projects.workspace = workspaces.id
WHERE workspaces.owner = $1::uuid
OR EXISTS (
  SELECT 1
  FROM collaborate c
  WHERE c.user_id = $1::uuid
  AND c.workspace_id = workspaces.id
)
`

type GetAllWorkspacesWithProjectsRow struct {
	Workspace Workspace `json:"workspace"`
	Project   Project   `json:"project"`
}

// GetAllWorkspacesWithProjects returns all workspaces that contain projects where the user is the owner of or collaborates on the workspace.
func (q *Queries) GetAllWorkspacesWithProjects(ctx context.Context, userID uuid.UUID) ([]GetAllWorkspacesWithProjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkspacesWithProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWorkspacesWithProjectsRow
	for rows.Next() {
		var i GetAllWorkspacesWithProjectsRow
		if err := rows.Scan(
			&i.Workspace.ID,
			&i.Workspace.Owner,
			&i.Workspace.Name,
			&i.Workspace.Description,
			&i.Workspace.CreatedAt,
			&i.Workspace.UpdatedAt,
			&i.Project.ID,
			&i.Project.Name,
			&i.Project.Description,
			&i.Project.Workspace,
			&i.Project.CreatedAt,
			&i.Project.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceByID = `-- name: GetWorkspaceByID :one
SELECT id, owner, name, description, created_at, updated_at FROM workspaces WHERE id = $1
`

// GetWorkspaceByID doesnt reuturn projects asssiated with the project
func (q *Queries) GetWorkspaceByID(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceByID, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkspaceWithProjectsByID = `-- name: GetWorkspaceWithProjectsByID :many
SELECT workspaces.id, workspaces.owner, workspaces.name, workspaces.description, workspaces.created_at, workspaces.updated_at, projects.id, projects.name, projects.description, projects.workspace, projects.created_at, projects.updated_at 
FROM workspaces JOIN projects ON projects.workspace_id = workspaces.id 
WHERE workspaces.id = $1
`

type GetWorkspaceWithProjectsByIDRow struct {
	Workspace Workspace `json:"workspace"`
	Project   Project   `json:"project"`
}

func (q *Queries) GetWorkspaceWithProjectsByID(ctx context.Context, id uuid.UUID) ([]GetWorkspaceWithProjectsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkspaceWithProjectsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkspaceWithProjectsByIDRow
	for rows.Next() {
		var i GetWorkspaceWithProjectsByIDRow
		if err := rows.Scan(
			&i.Workspace.ID,
			&i.Workspace.Owner,
			&i.Workspace.Name,
			&i.Workspace.Description,
			&i.Workspace.CreatedAt,
			&i.Workspace.UpdatedAt,
			&i.Project.ID,
			&i.Project.Name,
			&i.Project.Description,
			&i.Project.Workspace,
			&i.Project.CreatedAt,
			&i.Project.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE workspaces SET name = $3, description = $2, updated_at = NOW() WHERE id = $1
`

type UpdateWorkspaceParams struct {
	ID          uuid.UUID      `json:"id"`
	Description sql.NullString `json:"description"`
	Name        string         `json:"name"`
}

// UpdateWorkspace can only update the workspace name and description
func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkspace, arg.ID, arg.Description, arg.Name)
	return err
}
